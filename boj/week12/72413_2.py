####################################### 플로이드 와셜
def solution(n, s, a, b, fares):
    INF = 1e9
    graph = [[INF]*(n+1) for _ in range(n+1)]

    for u in range(1, n+1):
        graph[u][u] = 0

    for u, v, w in fares:
        graph[u][v] = w
        graph[v][u] = w

    for k in range(1, n+1):
        for u in range(1, n+1):
            for v in range(1, n+1):
                if graph[u][k] + graph[k][v] < graph[u][v]:
                    graph[u][v] = graph[u][k] + graph[k][v]
    
    # for row in graph:
    #     print(row)

    ret = INF
    for i in range(1, n+1):
        temp = graph[s][i] + graph[i][a] + graph[i][b]
        if temp < ret:
            ret = temp

    return ret

#####################################
# 테스트 1 〉	통과 (0.05ms, 10.2MB)
# 테스트 2 〉	통과 (0.07ms, 10.4MB)
# 테스트 3 〉	통과 (0.05ms, 10.4MB)
# 테스트 4 〉	통과 (0.17ms, 10.2MB)
# 테스트 5 〉	통과 (0.49ms, 10.2MB)
# 테스트 6 〉	통과 (0.44ms, 10.3MB)
# 테스트 7 〉	통과 (0.49ms, 10.3MB)
# 테스트 8 〉	통과 (0.69ms, 10.2MB)
# 테스트 9 〉	통과 (0.93ms, 10.1MB)
# 테스트 10 〉	통과 (1.26ms, 10.2MB)
# 효율성  테스트
# 테스트 1 〉	통과 (143.72ms, 10.5MB)
# 테스트 2 〉	통과 (482.96ms, 11MB)
# 테스트 3 〉	통과 (1007.72ms, 11.4MB)
# 테스트 4 〉	통과 (991.42ms, 11.4MB)
# 테스트 5 〉	통과 (1098.85ms, 11.3MB)
# 테스트 6 〉	통과 (1095.58ms, 11.4MB)
# 테스트 7 〉	통과 (1044.86ms, 13.8MB)
# 테스트 8 〉	통과 (1151.65ms, 14.1MB)
# 테스트 9 〉	통과 (1051.56ms, 12.9MB)
# 테스트 10 〉	통과 (1046.33ms, 12.9MB)
# 테스트 11 〉	통과 (1146.96ms, 12.8MB)
# 테스트 12 〉	통과 (1177.05ms, 12.7MB)
# 테스트 13 〉	통과 (1143.56ms, 12.8MB)
# 테스트 14 〉	통과 (1143.44ms, 12.7MB)
# 테스트 15 〉	통과 (1047.55ms, 12.8MB)
# 테스트 16 〉	통과 (997.85ms, 11.5MB)
# 테스트 17 〉	통과 (1095.26ms, 11.5MB)
# 테스트 18 〉	통과 (994.48ms, 11.2MB)
# 테스트 19 〉	통과 (1119.71ms, 11.5MB)
# 테스트 20 〉	통과 (1027.84ms, 11.8MB)
# 테스트 21 〉	통과 (1032.46ms, 11.7MB)
# 테스트 22 〉	통과 (1149.91ms, 12.7MB)
# 테스트 23 〉	통과 (1046.57ms, 12.8MB)
# 테스트 24 〉	통과 (1077.84ms, 12.7MB)
# 테스트 25 〉	통과 (979.19ms, 11.2MB)
# 테스트 26 〉	통과 (1058.74ms, 11MB)
# 테스트 27 〉	통과 (1041.44ms, 10.5MB)
# 테스트 28 〉	통과 (1042.37ms, 10.5MB)
# 테스트 29 〉	통과 (129.66ms, 10.4MB)
# 테스트 30 〉	통과 (129.09ms, 10.3MB)

n = 6
s = 4
a = 6
b = 2
fares = [[4, 1, 10], [3, 5, 24], [5, 6, 2], [3, 1, 41], [5, 1, 24], [4, 6, 50], [2, 4, 66], [2, 3, 22], [1, 6, 25]]	
n = 7
s = 3
a = 4
b = 1
fares = [[5, 7, 9], [4, 6, 4], [3, 6, 1], [3, 2, 3], [2, 1, 6]]	
n = 6
s = 4
a = 5
b = 6
fares = [[2,6,6], [6,3,7], [4,6,7], [6,5,11], [2,5,12], [5,3,20], [2,4,8], [4,3,9]]	
print(solution(n, s, a, b, fares))